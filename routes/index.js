const express = require('express');
const router = express.Router();

const glossaryList = [
  { id: 1, term: 'Continuous Integration (CI)', description: 'Continuous integration is a process in DevOps where changes are merged into a central repository after which the code is automated and tested. The continuous integration process is a practice in software engineering used to merge developers working copies several times a day into a shared mainline. It refers to the process of automating the integration of code changes coming from several sources. The process comprises several automation tools that emphasize the code correctness before integration.', reference: 'Soares, E., Sizilio, G., Santos, J., da Costa, D. A., & Kulesza, U. (2022). The effects of continuous integration on software development: a systematic literature review. Empirical Software Engineering, 27(3).' },
  { id: 2, term: 'Continuous Deployment (CD)', description: 'Continuous deployment is a strategy in software development where code changes to an application are released automatically into the production environment. This automation is driven by a series of predefined tests. Once new updates pass those tests, the system pushes the updates directly to the software users.', reference: 'https://www.ibm.com/topics/continuous-deployment' },
  { id: 3, term: 'Infrastructure as Code (IaC)', description: 'Infrastructure as Code (IaC) is an approach to managing and provisioning infrastructure resources using machine-readable configuration files or code. It allows for consistent and automated infrastructure deployment, making it easier to manage and scale infrastructure components.', reference: 'https://en.wikipedia.org/wiki/Infrastructure_as_code' },
  { id: 4, term: 'Configuration Management', description: 'Configuration management is the process of managing and maintaining the configurations of systems, software, and infrastructure. It involves techniques and tools for ensuring consistency, tracking changes, and maintaining desired configurations across different environments.', reference: 'https://www.redhat.com/en/topics/devops/what-is-configuration-management' },
  { id: 5, term: 'Microservices', description: 'Microservices is an architectural style that structures an application as a collection of small, loosely coupled services. Each microservice is independently deployable and focuses on performing a specific business capability. Microservices enable scalability, flexibility, and ease of maintenance in complex applications.', reference: 'https://martinfowler.com/articles/microservices.html' },
  { id: 6, term: 'Containers', description: 'Containers are lightweight, portable, and self-sufficient units that encapsulate an application and its dependencies. They enable consistent and efficient deployment across different computing environments, ensuring that applications run consistently regardless of the underlying infrastructure.', reference: 'https://www.docker.com/resources/what-container' },
  { id: 7, term: 'Container Orchestration', description: 'Container orchestration refers to the automated management and coordination of containerized applications across a cluster of machines. It involves deploying, scaling, and managing containers efficiently, often using tools like Kubernetes.', reference: 'https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/' },
  { id: 8, term: 'Serverless Computing', description: 'Serverless computing is a cloud computing execution model where the cloud provider dynamically manages the allocation of computing resources. It allows developers to focus on writing code without worrying about underlying infrastructure management. Serverless computing is event-driven and scales automatically based on demand.', reference: 'https://aws.amazon.com/serverless/what-is-serverless/' },
  { id: 9, term: 'Monitoring and Logging', description: 'Monitoring and logging involve the collection and analysis of data related to the performance, availability, and behavior of software systems and infrastructure. Monitoring helps track system health and performance metrics, while logging captures events and activities for troubleshooting, analysis, and auditing purposes.', reference: 'https://logz.io/learn/complete-guide-centralized-logging/' },
  { id: 10, term: 'Application Programming Interface (API)', description: 'An Application Programming Interface (API) is a set of rules and protocols that allows different software applications to communicate and interact with each other. APIs define the methods and data formats used for communication, enabling seamless integration and interoperability between systems.', reference: 'https://www.mulesoft.com/resources/api/what-is-an-api' },
];


/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'SIT722', sub: 'Glossary', glossaries: glossaryList });
});

module.exports = router;
