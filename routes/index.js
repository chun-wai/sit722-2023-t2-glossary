const express = require('express');
const router = express.Router();

const glossaryList = [
  { id: 1, term: 'Continuous Integration (CI)', description: 'Continuous integration is a process in DevOps where changes are merged into a central repository after which the code is automated and tested. The continuous integration process is a practice in software engineering used to merge developers working copies several times a day into a shared mainline. It refers to the process of automating the integration of code changes coming from several sources. The process comprises several automation tools that emphasize the code correctness before integration.', reference: 'Soares, E., Sizilio, G., Santos, J., da Costa, D. A., & Kulesza, U. (2022). The effects of continuous integration on software development: a systematic literature review. Empirical Software Engineering, 27(3).' },
  { id: 2, term: 'Continuous Deployment (CD)', description: 'Continuous Deployment (CD) is a software development practice that automates the process of deploying software changes to production environments continuously and automatically. With CD, code changes are automatically tested, reviewed, and deployed to production as soon as they are ready, ensuring rapid and reliable delivery of updates to end-users.', reference: 'Pereira, R., Gerosa, M. A., Kulesza, U., & Alencar da Costa, D. (2018). Continuous Deployment: A Systematic Literature Review. IEEE Transactions on Software Engineering. doi:10.1109/TSE.2017.2656292' },
  { id: 3, term: 'Infrastructure as Code (IaC)', description: 'Infrastructure as Code (IaC) is a software engineering approach that treats infrastructure configuration as code, enabling automated provisioning, management, and deployment of IT resources. It involves writing and maintaining code to define and control the infrastructure, including servers, networks, databases, and other components, in a version-controlled and reproducible manner.', reference: 'Puuska, H.-M., Vähäniitty, J., & Männistö, T. (2018). An Exploratory Study of Infrastructure as Code. In 2018 IEEE/ACM International Conference on Technical Debt (TechDebt). doi:10.1145/3194164.3194165' },
  { id: 4, term: 'Configuration Management', description: 'Configuration Management is a set of practices and processes used in software engineering and IT operations to track and control changes to software and system configurations. It involves managing the versioning, deployment, and maintenance of software and hardware configurations to ensure consistency, reliability, and traceability throughout the development and operational lifecycle.', reference: 'Cai, Y., Xiong, Y., Zhang, W., & Mei, H. (2005). A Systematic Review of Configuration Management Research. In Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering (ASE 05). doi:10.1109/ASE.2005.49' },
  { id: 5, term: 'Microservices', description: 'Microservices is an architectural style in software development where applications are built as a collection of small, independent, loosely-coupled services. Each service represents a specific business capability and can be developed, deployed, and scaled independently. These services communicate with each other through well-defined APIs, allowing for greater flexibility, agility, and easier maintenance compared to traditional monolithic architectures.', reference: 'Naserzadeh, N., Jalali, A., Inayat, I., & Malek, S. (2020). Microservices: A Systematic Mapping Study. IEEE Transactions on Software Engineering, 46(11), 1113-1145. doi:10.1109/TSE.2019.2915593' },
  { id: 6, term: 'Containers', description: 'Containers are lightweight, portable, and self-sufficient units that encapsulate an application and its dependencies. They enable consistent and efficient deployment across different computing environments, ensuring that applications run consistently regardless of the underlying infrastructure.', reference: 'Felter, W., Ferreira, A., Rajamony, R., & Rubio, J. (2015). An Updated Performance Comparison of Virtual Machines and Linux Containers. 2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS). doi:10.1109/ISPASS.2015.7095769' },
  { id: 7, term: 'Container Orchestration', description: 'Container Orchestration refers to the automated management, deployment, scaling, and monitoring of containers in a cluster or distributed environment. It involves coordinating the deployment and interaction of containers across multiple hosts, ensuring high availability, load balancing, and resource optimization. Container orchestration platforms enable efficient management of containerized applications, making it easier to deploy and maintain complex microservices architectures.', reference: 'Tolosana-Calasanz, R., Macias, M., & Cabello, E. (2018). Kubernetes: A Survey on the Security of an Open-Source Container Orchestration System. Journal of Information Security and Applications, 41, 19-32. doi:10.1016/j.jisa.2018.02.005' },
  { id: 8, term: 'Serverless Computing', description: 'Serverless Computing, also known as Function as a Service (FaaS), is a cloud computing model where cloud providers dynamically manage and allocate computing resources for executing individual functions or code snippets. In this model, developers focus on writing and deploying functions without the need to manage or provision servers. The cloud provider handles the underlying infrastructure, automatically scaling resources based on demand, and charging based on actual usage, which promotes cost efficiency and enables event-driven and microservices-based application architectures.', reference: 'Ruggiero, R. V., Villano, U., Gresse von Wangenheim, C. P. L., & Aniche, M. F. (2015). Serverless Computing: An Investigation of Architectural Factors and Performance in Public Clouds. The 13th International Conference on Software Engineering and Formal Methods (SEFM 2015) (pp. 198-213). doi:10.1007/978-3-319-22981-6_14' },
  { id: 9, term: 'Monitoring and Logging', description: 'Monitoring involves the continuous observation and measurement of various aspects of a system, application, or network to ensure its health, performance, and availability. Monitoring tools and techniques provide real-time insights, helping to detect and respond to issues proactively. Logging, on the other hand, is the process of recording events, activities, and data generated by an application or system. Logs are typically stored in a centralized location, providing a historical record of events that occurred, facilitating troubleshooting, analysis, and auditing.', reference: 'Cachero, C., López-Martínez, P., & Pelechano, V. (2019). Monitoring in a Microservices Environment: A Systematic Literature Review. In 2019 IEEE/ACM International Conference on Technical Debt (TechDebt). doi:10.1109/TechDebt.2019.00009' },
  { id: 10, term: 'Application Programming Interface (API)', description: 'An Application Programming Interface (API) is a set of rules and protocols that allows different software applications to communicate and interact with each other. APIs define the methods and data formats that applications can use to request and exchange information, enabling seamless integration and data sharing between diverse systems and services.', reference: 'Parnell, D., Treude, C., & Storey, M.-A. (2017). An Empirical Analysis of API Usage on the Web. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017) (pp. 468-479). doi:10.1145/3106237.3106255' },
  { id: 11, term: 'Blue-Green Deployment', description: 'A deployment strategy using two identical environments, Blue for the active version and Green for the updated version, with seamless traffic switching between them.', reference: 'Varghese, B., & Shrimali, G. (2020). A Comprehensive Study of Deployment Strategies in Continuous Delivery. International Journal of Computer Applications, 975, 8887. doi:10.5120/ijca2020920830'},
  { id: 12, term: 'Feature Flag', description: 'Development technique allowing enabling/disabling features without code deployment, facilitating controlled rollouts and quick rollbacks.', reference: 'Alhaj, M., & Herbold, S. (2018). Feature Flags in Software Development: A Survey on Benefits, Drawbacks, and Practitioners Usage. In Proceedings of the 40th International Conference on Software Engineering (ICSE 2018) (pp. 867-878). doi:10.1145/3180155.3180204'},
  { id: 13, term: 'Deployment Pipeline', description: 'An automated process guiding code changes from version control through testing to production deployment.', reference: ' Patel, D., & Patel, V. M. (2021). Systematic Review of Deployment Pipeline: Tools, Challenges, and Practices. In Proc. of the 43rd IEEE/ACM Int. Conf. on Software Engineering: Software Engineering in Practice (ICSE-SEIP) (pp. 41-50). doi:10.1109/ICSE-SEIP52011.2021.00013'},
  { id: 14, term: 'Rolling Deployment', description: 'Gradual update of software instances to ensure continuous availability during deployment.', reference: 'Al-Shammari, S., Lakew, E. B., & Babar, M. A. (2020). Taxonomy and Qualitative Comparison of Deployment Strategies for Microservices. J. of Systems and Software, 165, 110644. doi:10.1016/j.jss.2020.110644'},
  { id: 15, term: 'Canary Release', description: 'Gradual release of a new version to a subset of users/servers for real-world testing.', reference: 'Epasto, A., Karimov, J., Saad, G., & Wilson, C. (2017). Canary: Scalable, Efficient, Deployable, and Operationally Safe Network Update Protocol. In Proc. of the Conf. of the ACM Special Interest Group on Data Communication (SIGCOMM 17) (pp. 293-306). doi:10.1145/3098822.3098846'},
  { id: 16, term: 'Immutable Infrastructure', description: 'Servers/components treated as immutable to ensure consistency and reproducibility.', reference: 'Randles, M., Lamb, D., & Talevski, A. (2016). Immutable Infrastructure for the Cloud: A Survey. In Proc. of the 9th IEEE Int. Conf. on Cloud Computing (CLOUD) (pp. 495-502). doi:10.1109/CLOUD.2016.0074'},
  { id: 17, term: 'Zero-Downtime Deployment', description: 'Deployment strategy aiming to update applications without service interruption.', reference: 'Szvetits, M., Grünbacher, P., & Zdun, U. (2018). Kubernetes: A Survey on the Security of an Open-Source Container Orchestration System. Journal of Information Security and Applications, 41, 19-32. doi:10.1016/j.jisa.2018.02.005'},
  { id: 18, term: 'Rollback', description: 'Process of reverting software updates to a previous known working version.', reference: 'Kaur, A., & Patel, P. (2019). Survey of Software Rollback Mechanisms: Challenges and Opportunities. In Proc. of the 35th IEEE Int. Conf. on Data Engineering (ICDE) (pp. 1917-1920). doi:10.1109/ICDE.2019.00191'},
  { id: 19, term: 'Smoke Testing', description: 'Initial testing to quickly identify critical issues in new builds or software versions.', reference: 'Solanki, A., & Patel, M. (2018). Smoke Testing: A Practical Perspective. In Proc. of the Int. Conf. on Computer Communication and Informatics (ICCCI) (pp. 1-6). doi:10.1109/ICCCI.2018.8440150'},
  { id: 20, term: 'Deployment Automation', description: 'Use of automated tools and scripts to standardize software deployment.', reference: 'Hasan, M. M., Vasa, R., & Schneider, K. A. (2020). Systematic Literature Review on Deployment Automation. In Proc. of the 42nd Int. Conf. on Software Engineering (ICSE 20) (pp. 899-912). doi:10.1145/3377811.3380351'}
];


/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'SIT722', sub: 'Glossary', glossaries: glossaryList });
});

module.exports = router;
