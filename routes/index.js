const express = require('express');
const router = express.Router();

const glossaryList = [
  { id: 1, term: 'Continuous Integration (CI)', description: 'Continuous integration is a process in DevOps where changes are merged into a central repository after which the code is automated and tested. The continuous integration process is a practice in software engineering used to merge developers working copies several times a day into a shared mainline. It refers to the process of automating the integration of code changes coming from several sources. The process comprises several automation tools that emphasize the code correctness before integration.', reference: 'Soares, E., Sizilio, G., Santos, J., da Costa, D. A., & Kulesza, U. (2022). The effects of continuous integration on software development: a systematic literature review. Empirical Software Engineering, 27(3).' },
  { id: 2, term: 'Continuous Deployment (CD)', description: 'Continuous Deployment (CD) is a software development practice that automates the process of deploying software changes to production environments continuously and automatically. With CD, code changes are automatically tested, reviewed, and deployed to production as soon as they are ready, ensuring rapid and reliable delivery of updates to end-users.', reference: 'Pereira, R., Gerosa, M. A., Kulesza, U., & Alencar da Costa, D. (2018). Continuous Deployment: A Systematic Literature Review. IEEE Transactions on Software Engineering. doi:10.1109/TSE.2017.2656292' },
  { id: 3, term: 'Infrastructure as Code (IaC)', description: 'Infrastructure as Code (IaC) is a software engineering approach that treats infrastructure configuration as code, enabling automated provisioning, management, and deployment of IT resources. It involves writing and maintaining code to define and control the infrastructure, including servers, networks, databases, and other components, in a version-controlled and reproducible manner.', reference: 'Puuska, H.-M., Vähäniitty, J., & Männistö, T. (2018). An Exploratory Study of Infrastructure as Code. In 2018 IEEE/ACM International Conference on Technical Debt (TechDebt). doi:10.1145/3194164.3194165' },
  { id: 4, term: 'Configuration Management', description: 'Configuration Management is a set of practices and processes used in software engineering and IT operations to track and control changes to software and system configurations. It involves managing the versioning, deployment, and maintenance of software and hardware configurations to ensure consistency, reliability, and traceability throughout the development and operational lifecycle.', reference: 'Cai, Y., Xiong, Y., Zhang, W., & Mei, H. (2005). A Systematic Review of Configuration Management Research. In Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering (ASE 05). doi:10.1109/ASE.2005.49' },
  { id: 5, term: 'Microservices', description: 'Microservices is an architectural style in software development where applications are built as a collection of small, independent, loosely-coupled services. Each service represents a specific business capability and can be developed, deployed, and scaled independently. These services communicate with each other through well-defined APIs, allowing for greater flexibility, agility, and easier maintenance compared to traditional monolithic architectures.', reference: 'Naserzadeh, N., Jalali, A., Inayat, I., & Malek, S. (2020). Microservices: A Systematic Mapping Study. IEEE Transactions on Software Engineering, 46(11), 1113-1145. doi:10.1109/TSE.2019.2915593' },
  { id: 6, term: 'Containers', description: 'Containers are lightweight, portable, and self-sufficient units that encapsulate an application and its dependencies. They enable consistent and efficient deployment across different computing environments, ensuring that applications run consistently regardless of the underlying infrastructure.', reference: 'Felter, W., Ferreira, A., Rajamony, R., & Rubio, J. (2015). An Updated Performance Comparison of Virtual Machines and Linux Containers. 2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS). doi:10.1109/ISPASS.2015.7095769' },
  { id: 7, term: 'Container Orchestration', description: 'Container Orchestration refers to the automated management, deployment, scaling, and monitoring of containers in a cluster or distributed environment. It involves coordinating the deployment and interaction of containers across multiple hosts, ensuring high availability, load balancing, and resource optimization. Container orchestration platforms enable efficient management of containerized applications, making it easier to deploy and maintain complex microservices architectures.', reference: 'Tolosana-Calasanz, R., Macias, M., & Cabello, E. (2018). Kubernetes: A Survey on the Security of an Open-Source Container Orchestration System. Journal of Information Security and Applications, 41, 19-32. doi:10.1016/j.jisa.2018.02.005' },
  { id: 8, term: 'Serverless Computing', description: 'Serverless Computing, also known as Function as a Service (FaaS), is a cloud computing model where cloud providers dynamically manage and allocate computing resources for executing individual functions or code snippets. In this model, developers focus on writing and deploying functions without the need to manage or provision servers. The cloud provider handles the underlying infrastructure, automatically scaling resources based on demand, and charging based on actual usage, which promotes cost efficiency and enables event-driven and microservices-based application architectures.', reference: 'Ruggiero, R. V., Villano, U., Gresse von Wangenheim, C. P. L., & Aniche, M. F. (2015). Serverless Computing: An Investigation of Architectural Factors and Performance in Public Clouds. The 13th International Conference on Software Engineering and Formal Methods (SEFM 2015) (pp. 198-213). doi:10.1007/978-3-319-22981-6_14' },
  { id: 9, term: 'Monitoring and Logging', description: 'Monitoring involves the continuous observation and measurement of various aspects of a system, application, or network to ensure its health, performance, and availability. Monitoring tools and techniques provide real-time insights, helping to detect and respond to issues proactively. Logging, on the other hand, is the process of recording events, activities, and data generated by an application or system. Logs are typically stored in a centralized location, providing a historical record of events that occurred, facilitating troubleshooting, analysis, and auditing.', reference: 'Cachero, C., López-Martínez, P., & Pelechano, V. (2019). Monitoring in a Microservices Environment: A Systematic Literature Review. In 2019 IEEE/ACM International Conference on Technical Debt (TechDebt). doi:10.1109/TechDebt.2019.00009' },
  { id: 10, term: 'Application Programming Interface (API)', description: 'An Application Programming Interface (API) is a set of rules and protocols that allows different software applications to communicate and interact with each other. APIs define the methods and data formats that applications can use to request and exchange information, enabling seamless integration and data sharing between diverse systems and services.', reference: 'Parnell, D., Treude, C., & Storey, M.-A. (2017). An Empirical Analysis of API Usage on the Web. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2017) (pp. 468-479). doi:10.1145/3106237.3106255' },
  { id: 11, term: 'Blue-Green Deployment', description: 'A deployment strategy using two identical environments, Blue for the active version and Green for the updated version, with seamless traffic switching between them.', reference: 'Varghese, B., & Shrimali, G. (2020). A Comprehensive Study of Deployment Strategies in Continuous Delivery. International Journal of Computer Applications, 975, 8887. doi:10.5120/ijca2020920830'},
  { id: 12, term: 'Feature Flag', description: 'Development technique allowing enabling/disabling features without code deployment, facilitating controlled rollouts and quick rollbacks.', reference: 'Alhaj, M., & Herbold, S. (2018). Feature Flags in Software Development: A Survey on Benefits, Drawbacks, and Practitioners Usage. In Proceedings of the 40th International Conference on Software Engineering (ICSE 2018) (pp. 867-878). doi:10.1145/3180155.3180204'},
  { id: 13, term: 'Deployment Pipeline', description: 'An automated process guiding code changes from version control through testing to production deployment.', reference: ' Patel, D., & Patel, V. M. (2021). Systematic Review of Deployment Pipeline: Tools, Challenges, and Practices. In Proc. of the 43rd IEEE/ACM Int. Conf. on Software Engineering: Software Engineering in Practice (ICSE-SEIP) (pp. 41-50). doi:10.1109/ICSE-SEIP52011.2021.00013'},
  { id: 14, term: 'Rolling Deployment', description: 'Gradual update of software instances to ensure continuous availability during deployment.', reference: 'Al-Shammari, S., Lakew, E. B., & Babar, M. A. (2020). Taxonomy and Qualitative Comparison of Deployment Strategies for Microservices. J. of Systems and Software, 165, 110644. doi:10.1016/j.jss.2020.110644'},
  { id: 15, term: 'Canary Release', description: 'Gradual release of a new version to a subset of users/servers for real-world testing.', reference: 'Epasto, A., Karimov, J., Saad, G., & Wilson, C. (2017). Canary: Scalable, Efficient, Deployable, and Operationally Safe Network Update Protocol. In Proc. of the Conf. of the ACM Special Interest Group on Data Communication (SIGCOMM 17) (pp. 293-306). doi:10.1145/3098822.3098846'},
  { id: 16, term: 'Immutable Infrastructure', description: 'Servers/components treated as immutable to ensure consistency and reproducibility.', reference: 'Randles, M., Lamb, D., & Talevski, A. (2016). Immutable Infrastructure for the Cloud: A Survey. In Proc. of the 9th IEEE Int. Conf. on Cloud Computing (CLOUD) (pp. 495-502). doi:10.1109/CLOUD.2016.0074'},
  { id: 17, term: 'Zero-Downtime Deployment', description: 'Deployment strategy aiming to update applications without service interruption.', reference: 'Szvetits, M., Grünbacher, P., & Zdun, U. (2018). Kubernetes: A Survey on the Security of an Open-Source Container Orchestration System. Journal of Information Security and Applications, 41, 19-32. doi:10.1016/j.jisa.2018.02.005'},
  { id: 18, term: 'Rollback', description: 'Process of reverting software updates to a previous known working version.', reference: 'Kaur, A., & Patel, P. (2019). Survey of Software Rollback Mechanisms: Challenges and Opportunities. In Proc. of the 35th IEEE Int. Conf. on Data Engineering (ICDE) (pp. 1917-1920). doi:10.1109/ICDE.2019.00191'},
  { id: 19, term: 'Smoke Testing', description: 'Initial testing to quickly identify critical issues in new builds or software versions.', reference: 'Solanki, A., & Patel, M. (2018). Smoke Testing: A Practical Perspective. In Proc. of the Int. Conf. on Computer Communication and Informatics (ICCCI) (pp. 1-6). doi:10.1109/ICCCI.2018.8440150'},
  { id: 20, term: 'Deployment Automation', description: 'Use of automated tools and scripts to standardize software deployment.', reference: 'Hasan, M. M., Vasa, R., & Schneider, K. A. (2020). Systematic Literature Review on Deployment Automation. In Proc. of the 42nd Int. Conf. on Software Engineering (ICSE 20) (pp. 899-912). doi:10.1145/3377811.3380351'},
  { id: 21, term: 'containers-as-a-service (CaaS)', description: 'Cloud service for deploying and managing containerized applications.', reference: 'Hussein, M. K., Mousa, M. H., & Alqarni, M. A. (2019). A placement architecture for a container as a service (CaaS) in a cloud environment. Journal of Cloud Computing Advances Systems and Applications, 8(1). https://doi.org/10.1186/s13677-019-0131-1'},
  { id: 22, term: 'behavior driven development', description: ' Methodology emphasizing collaboration and human-readable scenarios for software behavior.', reference: 'Soeken, M., Wille, R., & Drechsler, R. (2012). Assisted behavior driven development using natural language processing. In Objects, Models, Components, Patterns (pp. 269–287). Springer Berlin Heidelberg.'},
  { id: 23, term: 'black box testing', description: ' Technique testing software without knowing internal code structure.', reference: 'Khan, M. E. (2021). Different approaches to Black Box Testing technique for finding errors. https://papers.ssrn.com/abstract=3890672'},
  { id: 24, term: 'agile software development', description: 'Iterative approach focusing on flexibility and quick, customer-oriented results.', reference: 'Abrahamsson, P., Salo, O., Ronkainen, J., & Warsta, J. (2017). Agile software development methods: Review and analysis. In arXiv [cs.SE]. http://arxiv.org/abs/1709.08439'},
  { id: 25, term: 'application release automation (ARA)', description: 'Tools automating software deployment, testing, and management.', reference: 'Arulkumar, V., & Lathamanju, R. (2019). Start to finish automation achieve on cloud with build channel: By DevOps method. Procedia Computer Science, 165, 399–405. https://doi.org/10.1016/j.procs.2020.01.032'},
  { id: 26, term: 'artifact', description: 'Tangible item (e.g., code, files) produced during software development.', reference: 'Soni, M. (2015). End to end automation on cloud with build pipeline: The case for DevOps in insurance industry, continuous integration, continuous testing, and continuous delivery. 2015 IEEE International Conference on Cloud Computing in Emerging Markets (CCEM), 85–89.'},
  { id: 27, term: 'artificial intelligence', description: 'Simulation of human intelligence in machines.', reference: 'Holzinger, A., Langs, G., Denk, H., Zatloukal, K., & Müller, H. (2019). Causability and explainability of artificial intelligence in medicine. Wiley Interdisciplinary Reviews. Data Mining and Knowledge Discovery, 9(4). https://doi.org/10.1002/widm.1312'},
  { id: 28, term: 'branching', description: ': In software development, branching involves creating separate lines for features or fixes, allowing parallel work and later integration.', reference: 'Pianini, D., & Neri, A. (2021). Breaking down monoliths with Microservices and DevOps: an industrial experience report. 2021 IEEE International Conference on Software Maintenance and Evolution (ICSME), 505–514.'},
  { id: 29, term: 'cloud computing', description: 'Internet-based services for storage, processing, and resources.', reference: 'Agrawal, P., & Rawat, N. (2019). Devops, A new approach to cloud development & testing. 2019 International Conference on Issues and Challenges in Intelligent Computing Techniques (ICICT), 1, 1–4.'},
  { id: 30, term: 'cluster', description: 'Group of interconnected computers for improved performance and reliability.', reference: 'Kang, H., Le, M., & Tao, S. (2016). Container and Microservice Driven Design for Cloud Infrastructure DevOps. 2016 IEEE International Conference on Cloud Engineering (IC2E), 202–211.'},
  { id: 31, term: 'Jenkins', description: "Jenkins is an open-source automation server widely used for continuous integration and continuous delivery (CI/CD) pipelines. It facilitates the seamless integration of code changes into a shared repository, automating build, test, and deployment processes. Developers can set up automated pipelines that include stages such as building, testing, and deploying applications. With an extensive plugin ecosystem, Jenkins can be customized to suit a variety of development and deployment workflows.", reference: "Seth, N., & Khare, R. (2015). ACI (automated Continuous Integration) using Jenkins: Key for successful embedded Software development. 2015 2nd International Conference on Recent Advances in Engineering & Computational Sciences (RAECS), 1–6."},
  { id: 32, term: 'Ansible', description: "Ansible is an open-source infrastructure as code tool that focuses on configuration management and application deployment. It employs simple and human-readable YAML files, known as playbooks, to define and automate tasks such as configuring servers, installing software, and managing infrastructure. Ansible uses an agentless architecture, connecting to remote systems via SSH or other protocols, making it efficient and easy to manage.", reference: "Mysari, S., & Bejgam, V. (2020). Continuous integration and continuous deployment pipeline automation using Jenkins ansible. 2020 International Conference on Emerging Trends in Information Technology and Engineering (Ic-ETITE), 1–4."},
  { id: 33, term: 'Docker', description: "Docker is a powerful open-source platform that enables developers to create, deploy, and manage containers. Containers encapsulate applications and their dependencies, ensuring consistency across different environments. Docker containers can be easily shared and run on various systems without concerns about compatibility. This technology promotes isolation, portability, and rapid application deployment, making it a staple in modern software development.", reference: "Cito, J., Schermann, G., Wittern, J. E., Leitner, P., Zumberi, S., & Gall, H. C. (2017). An empirical analysis of the docker container ecosystem on GitHub. 2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR), 323–333."},
  { id: 34, term: 'Kubernetes', description: "Kubernetes is a leading open-source container orchestration platform that automates the deployment, scaling, and management of containerized applications. It abstracts complex tasks like load balancing, scaling, and service discovery, enabling developers to focus on building applications. Kubernetes provides features for automatic scaling, self-healing, and rolling updates, making it ideal for managing large-scale applications and microservices.", reference: "Jeffery, A., Howard, H., & Mortier, R. (2021). Rearchitecting Kubernetes for the Edge. Proceedings of the 4th International Workshop on Edge Systems, Analytics and Networking, 7–12."},
  { id: 35, term: 'Grafana', description: "Grafana is a versatile and widely-used open-source visualization and monitoring tool that empowers organizations to gain valuable insights from their data. It excels at creating interactive and dynamic dashboards that provide a visual representation of metrics, making it easier to understand and analyze complex data sets.", reference: "Chang, C.-C., Yang, S.-R., Yeh, E.-H., Lin, P., & Jeng, J.-Y. (2017). A kubernetes-based monitoring platform for dynamic cloud resource provisioning. GLOBECOM 2017 - 2017 IEEE Global Communications Conference, 1–6."},
  { id: 36,
    term: 'Istio',
    description: "Istio is a robust and open-source service mesh platform designed to enhance the management, security, and observability of microservices-based applications. It functions as a dedicated layer for controlling and securing communication between services within a Kubernetes cluster, reducing the complexity of managing interactions in distributed architectures.",
    reference: "Sheikh, O., Dikaleh, S., Mistry, D., Pape, D., & Felix, C. (2018). Modernize digital applications with microservices management using the istio service mesh. Proceedings of the 28th Annual International Conference on Computer Science and Software Engineering, 359–360."
  },
  {
    id: 37,
    term: 'Terraform',
    description: "Terraform is an open-source infrastructure as code tool that employs human-readable configuration files to define and provision cloud resources. It supports multiple cloud providers and services, allowing developers to manage infrastructure consistently across environments. Terraform enables teams to create, modify, and destroy infrastructure using declarative configuration, ensuring version control and predictability.",
    reference: "Tonello, J. S. (2022). Automate system deployments with terraform. In Practical Linux DevOps (pp. 311–327). Apress."
  },
  {
    id: 38,
    term: 'Spinnaker',
    description: "Spinnaker is an open-source continuous delivery platform designed to automate complex deployment pipelines. It offers support for multiple cloud providers and orchestrates deployment stages such as testing, verification, and rollback. Spinnaker promotes consistency in deployments, helps ensure high availability, and streamlines the process of delivering applications to production environments.",
    reference: "Patiño-Saucedo, A., Rostro-Gonzalez, H., Serrano-Gotarredona, T., & Linares-Barranco, B. (2020). Event-driven implementation of deep spiking convolutional neural networks for supervised classification using the SpiNNaker neuromorphic platform. Neural Networks: The Official Journal of the International Neural Network Society, 121, 319–328. https://doi.org/10.1016/j.neunet.2019.09.008"
  },
  {
    id: 39,
    term: 'YAML File',
    description: "YAML (YAML Ain't Markup Language) is a widely used human-readable configuration file format. It's used to structure data in a way that's both easy for humans to read and write and easy for machines to parse. In the context of software development, YAML files are often used for configuration management, defining infrastructure, and specifying settings for various tools and services.",
    reference: "Florez, A., Astudillo, A., Decré, W., Swevers, J., & Gillis, J. (2023). IMPACT: A toolchain for nonlinear model predictive control specification, prototyping, and deployment. In arXiv [math.OC]. http://arxiv.org/abs/2303.08850"
  },
  {
    id: 40,
    term: 'OpenFaaS',
    description: "OpenFaaS is an open-source serverless framework that operates on top of Kubernetes. It enables developers to deploy event-driven functions without managing server infrastructure. OpenFaaS abstracts the complexities of scaling, resource management, and event handling, allowing developers to focus solely on writing and deploying code.",
    reference: "Jansen, M., Wagner, L., Trivedi, A., & Iosup, A. (2023). Continuum: Automate Infrastructure Deployment and Benchmarking in the Compute Continuum. Companion of the 2023 ACM/SPEC International Conference on Performance Engineering, 181–188."
  }
];

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'SIT722', sub: 'Glossary', glossaries: glossaryList });
});

module.exports = router;
